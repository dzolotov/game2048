// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int power(
    int arg0,
  ) {
    return _power(
      arg0,
    );
  }

  late final _powerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('power');
  late final _power = _powerPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> usePrefix(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _usePrefix(
      arg0,
      arg1,
    );
  }

  late final _usePrefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('usePrefix');
  late final _usePrefix = _usePrefixPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void memory_free(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _memory_free(
      arg0,
    );
  }

  late final _memory_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'memory_free');
  late final _memory_free =
      _memory_freePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
