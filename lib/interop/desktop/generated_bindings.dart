// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int power(
    int arg0,
  ) {
    return _power(
      arg0,
    );
  }

  late final _powerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('power');
  late final _power = _powerPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> mergeStrings(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _mergeStrings(
      arg0,
      arg1,
    );
  }

  late final _mergeStringsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('mergeStrings');
  late final _mergeStrings = _mergeStringsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void memory_free(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _memory_free(
      arg0,
    );
  }

  late final _memory_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'memory_free');
  late final _memory_free =
      _memory_freePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void set_name(
    ffi.Pointer<NativePerson> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _set_name(
      arg0,
      arg1,
    );
  }

  late final _set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NativePerson>, ffi.Pointer<ffi.Char>)>>('set_name');
  late final _set_name = _set_namePtr.asFunction<
      void Function(ffi.Pointer<NativePerson>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<NativeFameEntry> getFirst() {
    return _getFirst();
  }

  late final _getFirstPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NativeFameEntry> Function()>>(
          'getFirst');
  late final _getFirst =
      _getFirstPtr.asFunction<ffi.Pointer<NativeFameEntry> Function()>();

  void addFameEntry(
    ffi.Pointer<NativeFameEntry> entry,
  ) {
    return _addFameEntry(
      entry,
    );
  }

  late final _addFameEntryPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativeFameEntry>)>>(
      'addFameEntry');
  late final _addFameEntry = _addFameEntryPtr
      .asFunction<void Function(ffi.Pointer<NativeFameEntry>)>();

  void clearFameEntries() {
    return _clearFameEntries();
  }

  late final _clearFameEntriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('clearFameEntries');
  late final _clearFameEntries =
      _clearFameEntriesPtr.asFunction<void Function()>();
}

final class NativePerson extends ffi.Struct {
  external ffi.Pointer<ffi.Char> salutation;

  external ffi.Pointer<ffi.Char> name;
}

final class NativeFameEntry extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Int()
  external int score;

  external ffi.Pointer<ffi.Void> next;
}
